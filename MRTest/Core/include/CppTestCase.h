///--------------------------------------------------------------------------------------
/// @file	CppTestCase.h
/// @brief	Test case base class.
///
/// @author		Michael Roop
/// @date		2010
/// @version	1.0
///
/// Copyright 2010 Michael Roop
///--------------------------------------------------------------------------------------
#if !defined(CPP_TEST_CASE_H)
#define CPP_TEST_CASE_H

#include "mr_string.h"
#include "mr_sstream.h"
#include "mr_char.h"
#include "mr_testInfoObject.h"


namespace CppTest {

class TestCaseHolder;

///--------------------------------------------------------------------------------------
///
///	@brief	base class of all test cases
///
/// This class encapsulates performance logging of each stage of the test.  As well, it
/// tracks the state and holds test information generated by the derived tests.
///
/// The test case object can be querried by the logger derived objects to assemble the 
/// information required.
///
/// Test cases are void methods registered with a unique name which is used to identify
/// and retrieve the test.  A description string is provided at register time.
///
/// There are three stages to a test case, the setup, the test, and the cleanup.
///
/// You can regiser startup and teardown methods which are executed before and after
/// each test case
///
/// You can also register Fixture startup and teardown methods which are executed once 
/// before any test case is executed and after the last test case is executed.
///--------------------------------------------------------------------------------------
class Case {

public:

	/// @brief	Status indicator for the test case.
	typedef enum Status {
		ST_NONE,		///< No status. Default.
		ST_SUCCESS,		///< Test was successful.
		ST_FAIL_SETUP,	///< Test failed on setup.
		ST_FAIL_TEST,	///< Test failed.
		ST_FAIL_CLEANUP,///< Test failed on cleanup.
		ST_NOT_EXISTS,	///< Test with unique id does not exist.

		ST_FAIL_FIXTURE_SETUP,
		ST_FAIL_FIXTURE_TEARDOWN

	} TestCaseStatus;

public:

	/// @brief	Constructor
	///	@param	name	Name of the test case.
	///	@param	description	Description of test case.
	Case(const mr_utils::mr_string& name, const mr_utils::mr_string& description);


	/// @brief	Protected copy constructor to force use of regular constructor.
	///
	/// @param	tc	The testCase used for construction.
	Case( const Case& tc );
	

	/// @brief	Called to reset internal state
	void Reset();


	/// @brief	Retrieve uniquely indentifying test name.
	///
	/// @return	The unique name of the test.
	const mr_utils::mr_string& name() const;


	/// @brief	Retrieve test description.
	///
	/// @return	The description of the test.
	const mr_utils::mr_string& desc() const;


	/// @brief	Retrieve the test status in string format.
	///
	/// @exception	throws an mr_exception if the status is not accounted
	///				for.  This would be a programming error.
	/// @return	The status of the test.
	mr_utils::mr_string status() const;


	/// @brief	Retrieve the test status in enum format.
	///
	/// @return	The status of the test.
	TestCaseStatus statusEnum() const;


	/// @brief	Retrieve the performance timing for the test setup.
	///
	/// @return	The time in ms that the setup took.
	long long setupTime() const;


	/// @brief	Retrieve the performance timing for the test.
	///
	/// @return	The time in ms that the test took.
	long long execTime() const;


	/// @brief	Retrieve the performance timing for the test cleanuup.
	///
	/// @return	The time in ms that the cleanup took.
	long long cleanupTime() const;


	/// @brief	Retrieve the message buffer.
	///
	///	Call to add messages from your tests. You would usualy use this to document
	///	a failure condition. This is usually put out to the shorter summary logs.
	///
	/// @return	The test message buffer.
	mr_utils::mr_stringstream& getMsgBuffer();


	/// @brief	Retrieve the message buffer.
	///
	///	This contains the details of failures from the comparison macros. These are usually
	/// more detailed and are sent to a specific log.
	///
	/// @return	The test message buffer.
	mr_utils::mr_stringstream& getVerboseBuffer();


protected:
	TestCaseStatus				m_status;			///< Status of the test case.

private:
	mr_utils::mr_string			m_name;				///< Test name.
	mr_utils::mr_string			m_desc;				///< Test description.
	mr_test::TestArguments		m_args;				///< Test arguments.

	mr_utils::mr_stringstream	m_buffer;			///< Short message buffer.
	mr_utils::mr_stringstream	m_verboseBuffer;	///< Verbose message buffer.
	long long					m_setupTime;		///< Setup time in ms.
	long long					m_execTime;			///< Test time in ms.
	long long					m_cleanupTime;		///< Cleanup time in ms.

private:
	
	/// @brief	Protected default constructor to force use of regular constructor.
	Case() ;


	/// @brief	Protected copy constructor to force use of regular constructor.
	///
	/// @param	tc	The testCase used for construction.
//	Case( const Case& tc );

};


} // end namespace cppTest::Case

#endif
