///--------------------------------------------------------------------------------------
/// @file	mr_case.h
/// @brief	Test case base class.
///
/// @author		Michael Roop
/// @date		2010
/// @version	1.0
///
/// Copyright 2010 Michael Roop
///--------------------------------------------------------------------------------------
#if !defined(MR_TEST_CASE_FIXTURE_H)
#define MR_TEST_CASE_FIXTURE_H

#include "mr_string.h"
#include "mr_sstream.h"
#include "mr_char.h"
#include "mr_testInfoObject.h"


namespace mr_test {

class TestCaseHolder;

///--------------------------------------------------------------------------------------
///
///	@brief	Pure virtual base class for all test cases.
///
/// This class encapsulates performance logging of each stage of the test.  As well, it
/// tracks the state and holds test information generated by the derived tests.
///
/// The test case object can be querried by the logger derived objects to assemble the 
/// information required.
///
/// Test case objects are constructed with a unique id string which is used to identify
/// and retrieve the test.  It is also constructed with a description string.
///
/// When the test case is retrieved, the arguments can be fed to it by means of the init
/// method.
///
/// There are three stages to a test case, the setup, the test, and the cleanup.
///
///--------------------------------------------------------------------------------------
class testCase {

public:

	/// @brief	Status indicator for the test case.
	typedef enum Status {
		ST_NONE,		///< No status. Default.
		ST_SUCCESS,		///< Test was successful.
		ST_FAIL_SETUP,	///< Test failed on setup.
		ST_FAIL_TEST,	///< Test failed.
		ST_FAIL_CLEANUP,///< Test failed on cleanup.
		ST_NOT_EXISTS,	///< Test with unique id does not exist.

		ST_FAIL_FIXTURE_SETUP,
		ST_FAIL_FIXTURE_TEARDOWN

	} TestCaseStatus;


	///////////////////////////////////////////////////////////////////
	//				Start New Stuff                                  //   
	///////////////////////////////////////////////////////////////////

public:

	/// @brief	Typdef of a class method pointer with no param and no return to clean up syntax. 
	typedef void (testCase::*  testCase_ptr) (void);


	void RunTest(const mr_utils::mr_string& name, const TestArguments& args);

	/// @brief	Reset flags and data and run 
	void ResetFixture();


	bool HasTest(const mr_utils::mr_string& name);

	const std::vector<mr_utils::mr_string> GetTestNames();

protected:


private:
	testCase_ptr m_fixtureSetup;	// setup method for the entire fixture
	testCase_ptr m_fixtureTeardown;	// teardown method for the entire fixture
	testCase_ptr m_testSetup;		// setup method for each test
	testCase_ptr m_testTeardown;	// teardown method for each test

	/// @brief	Determines if a test has been called on the fixture yet
	bool m_isFixtureCalled;

	/// @brief	List of tests registered in the test fixture
	std::vector<mr_utils::mr_string> m_testNames;


	std::vector<TestCaseHolder> m_tests; 

protected:

	/// @brief	Register a setup method to be executed once for the entire fixture
	/// @param	setup The setup method
	void RegisterFixtureSetup(testCase_ptr setup);


	/// @brief	Register a teardown method to be executed once for the entire fixture
	/// @param	teardown The teardown method
	void RegisterFixtureTeardown(testCase_ptr teardown);
	

	/// @brief	Register a setup method to be executed for each test in the fixture
	/// @param	setup The setup method
	void RegisterTestSetup(testCase_ptr setup);


	/// @brief	Register a teardown method to be executed for each test in the fixture
	/// @param	teardown The teardown method
	void RegisterTestTeardown(testCase_ptr teardown);


	void RegisterTest(testCase_ptr test, const mr_utils::mr_string& name, const mr_utils::mr_string& description);

	///	@brief	Reset any data from previous test TODO - replace with current test.data
	void ResetTest();


private:

	/// @brief	Wrapper function to wrap performance logging for various methods.
	///
	/// @param	timeVal	A reference to hold the timing information.
	/// @param	funcPtr	A pointer to the function to time.
	///
	/// @return	true if the function timed is successful, otherwise false.
	void ExecStep(long long& timeVal, testCase_ptr funcPtr, TestCaseStatus failStatus);

	void ExecTestFixtureSetup();


	///////////////////////////////////////////////////////////////////
	//                END NEW STUFF                                  //
	///////////////////////////////////////////////////////////////////


public:

	/// @brief	Constructor
	///	@param	name	Name of the test case.
	///	@param	desc	Description of test case.
	testCase(const mr_utils::mr_string& name, const mr_utils::mr_string& desc);


	/// @brief	Retrieve uniquely indentifying test name.
	///
	/// @return	The unique name of the test.
	const mr_utils::mr_string& name() const;


	/// @brief	Retrieve test description.
	///
	/// @return	The description of the test.
	const mr_utils::mr_string& desc() const;


	/// @brief	Retrieve test arguments.
	///
	/// @return	The arguments for the test.
	const TestArguments& args() const;


	/// @brief	Retrieve the test status in string format.
	///
	/// @exception	throws an mr_exception if the status is not accounted
	///				for.  This would be a programming error.
	/// @return	The status of the test.
	mr_utils::mr_string status() const;


	/// @brief	Retrieve the test status in enum format.
	///
	/// @return	The status of the test.
	TestCaseStatus statusEnum() const;


	/// @brief	Retrieve the performance timing for the test setup.
	///
	/// @return	The time in ms that the setup took.
	long long setupTime() const;


	/// @brief	Retrieve the performance timing for the test.
	///
	/// @return	The time in ms that the test took.
	long long execTime() const;


	/// @brief	Retrieve the performance timing for the test cleanuup.
	///
	/// @return	The time in ms that the cleanup took.
	long long cleanupTime() const;


	/// @brief	Retrieve the message buffer.
	///
	///	Call to add messages from your tests. You would usualy use this to document
	///	a failure condition. This is usually put out to the shorter summary logs.
	///
	/// @return	The test message buffer.
	mr_utils::mr_stringstream& getMsgBuffer();


	/// @brief	Retrieve the message buffer.
	///
	///	This contains the details of failures from the comparison macros. These are usually
	/// more detailed and are sent to a specific log.
	///
	/// @return	The test message buffer.
	mr_utils::mr_stringstream& getVerboseBuffer();

protected:
	TestCaseStatus				m_status;			///< Status of the test case.

private:

	mr_utils::mr_string			m_name;				///< Test name.
	mr_utils::mr_string			m_desc;				///< Test description.
	TestArguments				m_args;				///< Test arguments.

	mr_utils::mr_stringstream	m_buffer;			///< Short message buffer.
	mr_utils::mr_stringstream	m_verboseBuffer;	///< Verbose message buffer.
	long long					m_setupTime;		///< Setup time in ms.
	long long					m_execTime;			///< Test time in ms.
	long long					m_cleanupTime;		///< Cleanup time in ms.

	
	/// @brief	Protected default constructor to force use of regular constructor.
	testCase() ;


	/// @brief	Protected copy constructor to force use of regular constructor.
	///
	/// @param	tc	The testCase used for construction.
	testCase( const testCase& tc );

};


class TestCaseHolder {

public:
	mr_utils::mr_string m_name;
	mr_utils::mr_string m_description;
	testCase::testCase_ptr m_test;


	TestCaseHolder(testCase::testCase_ptr funcPtr, const mr_utils::mr_string& name, const mr_utils::mr_string& description) :	
		m_test(funcPtr),
		m_name(name),
		m_description(description) {
	}



	// TODO - make more robust

};




} // end namespace.

#endif